(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{1084:function(t,a,s){"use strict";s.r(a);var r=s(71),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"贪心算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贪心算法"}},[t._v("#")]),t._v(" 贪心算法")]),t._v(" "),s("h2",{attrs:{id:"概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),s("ul",[s("li",[t._v("每一步选择都采取当前状态下最有利的选择,从而希望结果是最优的")])]),t._v(" "),s("h2",{attrs:{id:"解题步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解题步骤"}},[t._v("#")]),t._v(" 解题步骤")]),t._v(" "),s("ul",[s("li",[t._v("针对一组数据,定义了限制值和期望值,期望从中选出几个数据,在满足限制的情况下,期望值最大")]),t._v(" "),s("li",[t._v("选择对限制值同等贡献量的情况下,对期望值贡献最大的数据")]),t._v(" "),s("li",[t._v("测试")]),t._v(" "),s("li",[t._v("贪心算法为寻找局部最优解并组合为全局最优解,但不一定总能符合\n"),s("ul",[s("li",[t._v("当前面的选择会影响后面的选择时")])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);