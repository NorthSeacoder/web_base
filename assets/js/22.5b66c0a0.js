(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{1076:function(s,a,t){"use strict";t.r(a);var n=t(71),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[s._v("#")]),s._v(" 数组")]),s._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),t("p",[s._v("本章提到到数组仅指数据结构意义上的数组，而非编程语言中定义的数组")])]),s._v(" "),t("h2",{attrs:{id:"掌握程度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#掌握程度"}},[s._v("#")]),s._v(" 掌握程度")]),s._v(" "),t("ul",[t("li",[s._v("能自己实现动态数组,栈,队列")])]),s._v(" "),t("h2",{attrs:{id:"代码实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[s._v("#")]),s._v(" 代码实现")]),s._v(" "),t("ul",[t("li",[s._v("实现一个支持动态扩容的数组")]),s._v(" "),t("li",[s._v("实现一个大小固定的有序数组,支持动态增删改操作")]),s._v(" "),t("li",[s._v("实现连个有序数组合并为一个有序数组")])]),s._v(" "),t("h2",{attrs:{id:"什么是数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是数组"}},[s._v("#")]),s._v(" 什么是数组")]),s._v(" "),t("ul",[t("li",[s._v("数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。")]),s._v(" "),t("li",[s._v("优点：两限制使得具有随机访问的特性")]),s._v(" "),t("li",[s._v("缺点：删除，插入数据效率低"),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("TIP")])])])]),s._v(" "),t("p",[s._v("线性表就是数据排成一条线一样的结构，每个线性表的数据最多只有前后两个方向。数组，链表，队列，栈 等都是线性表结构")]),s._v(" "),t("p",[s._v("在非线性表中，数据之间并不是简单的前后关系，二叉树，堆，图，等是非线性表\n:::")]),s._v(" "),t("h3",{attrs:{id:"数组怎么根据下标随机访问的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组怎么根据下标随机访问的"}},[s._v("#")]),s._v(" 数组怎么根据下标随机访问的")]),s._v(" "),t("ul",[t("li",[s._v("通过寻址公式，计算出该元素存储的内存地址")])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("\na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("_address "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" base_address "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" data_type_size\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"为何数组插入和删除低效"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为何数组插入和删除低效"}},[s._v("#")]),s._v(" 为何数组插入和删除低效")]),s._v(" "),t("ul",[t("li",[s._v("若有一元素想往 int[n]的第 k 个位置插入/删除数据，需要在 k-n 的位置往后移/前移。最好情况时间复杂度 O(1),最坏情况复杂度为 O(n),平均负责度为 O(n)")])]),s._v(" "),t("h4",{attrs:{id:"提高插入效率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提高插入效率"}},[s._v("#")]),s._v(" 提高插入效率")]),s._v(" "),t("ul",[t("li",[s._v("如果数组中的数据不是有序的，也就是无规律的情况下，可以直接把第 k 个位置上的数据移到最后，然后将插入的数据直接放在第 k 个位置上。这样时间复杂度就将为 O（1）了。")])]),s._v(" "),t("h4",{attrs:{id:"提高删除效率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提高删除效率"}},[s._v("#")]),s._v(" 提高删除效率")]),s._v(" "),t("ul",[t("li",[s._v("将多次删除操作中集中在一起执行，可以先记录已经删除的数据，但是不进行数据迁移，而仅仅是记录，当发现没有更多空间存储时，再执行真正的删除操作。这也是 JVM 标记清除垃圾回收算法的核心思想。")])]),s._v(" "),t("h3",{attrs:{id:"为什么数组要从-0-开始编号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么数组要从-0-开始编号"}},[s._v("#")]),s._v(" 为什么数组要从 0 开始编号")]),s._v(" "),t("ul",[t("li",[s._v("由于数组是通过寻址公式，计算出该元素存储的内存地址：")])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("_address "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" base_address "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" data_type_size\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("如果数组是从 1 开始计数，那么就会变成：")])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("_address "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" base_address "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" （i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("）"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" data_type_size\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("对于 CPU 来说，多了一次减法的指令。当然，还有一定的历史原因(c 语言最先采用从 0 开始编号，为了便于学习，其他语言继承了这一特点)")])]),s._v(" "),t("h3",{attrs:{id:"数组和链表的区别-数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组和链表的区别-数组"}},[s._v("#")]),s._v(" 数组和链表的区别（数组）")]),s._v(" "),t("ul",[t("li",[s._v("数组中的元素存在一个连续的内存空间中，而链表中的元素可以不存在于连续的内存空间。")]),s._v(" "),t("li",[s._v("数组支持随机访问，根据下标随机访问的时间复杂度是 O(1)；链表适合插入、删除操作，时间复杂度为 O(1）。")])]),s._v(" "),t("h2",{attrs:{id:"数组实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组实现"}},[s._v("#")]),s._v(" 数组实现")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("element")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("constructor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" index")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("index "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("_Array")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("constructor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("size")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("size "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" size"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//增加")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("append")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" ele "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("element")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("h2",{attrs:{id:"相关问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相关问题"}},[s._v("#")]),s._v(" 相关问题")]),s._v(" "),t("h3",{attrs:{id:"实现一个支持动态扩容的数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个支持动态扩容的数组"}},[s._v("#")]),s._v(" 实现一个支持动态扩容的数组")]),s._v(" "),t("h3",{attrs:{id:"实现一个大小固定的有序数组-支持动态增删改操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个大小固定的有序数组-支持动态增删改操作"}},[s._v("#")]),s._v(" 实现一个大小固定的有序数组，支持动态增删改操作")]),s._v(" "),t("h3",{attrs:{id:"实现两个有序数组合并为一个有序数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现两个有序数组合并为一个有序数组"}},[s._v("#")]),s._v(" 实现两个有序数组合并为一个有序数组")])])}),[],!1,null,null,null);a.default=e.exports}}]);