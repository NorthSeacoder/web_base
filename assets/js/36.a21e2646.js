(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{1108:function(a,t,s){"use strict";s.r(t);var r=s(71),v=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"冒泡-插入-选择"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#冒泡-插入-选择"}},[a._v("#")]),a._v(" 冒泡,插入,选择")]),a._v(" "),s("ul",[s("li",[a._v("特指空间复杂度是 O(1)的算法")]),a._v(" "),s("li",[a._v("冒泡,插入,选择")])]),a._v(" "),s("h2",{attrs:{id:"掌握程度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#掌握程度"}},[a._v("#")]),a._v(" 掌握程度")]),a._v(" "),s("ul",[s("li",[a._v("能实现各种排序算法,二分查找及其变体")])]),a._v(" "),s("h2",{attrs:{id:"代码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[a._v("#")]),a._v(" 代码实现")]),a._v(" "),s("ul",[s("li",[a._v("排序\n"),s("ul",[s("li",[a._v("实现归并排序,快速排序,插入排序,冒泡排序,选择排序")]),a._v(" "),s("li",[a._v("查找一组数据中的第 k 大元素")])])]),a._v(" "),s("li",[a._v("二分查找\n"),s("ul",[s("li",[a._v("实现一个有序数组的二分查找算法")]),a._v(" "),s("li",[a._v("实现模糊二分查找算法(大于等于给定值的第一个元素)")])])])]),a._v(" "),s("h2",{attrs:{id:"如何分析一个排序算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何分析一个排序算法"}},[a._v("#")]),a._v(" 如何分析一个排序算法")]),a._v(" "),s("h3",{attrs:{id:"执行效率"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行效率"}},[a._v("#")]),a._v(" 执行效率")]),a._v(" "),s("ul",[s("li",[a._v("最好,最坏,平均情况时间复杂度")]),a._v(" "),s("li",[a._v("时间复杂度的系数")]),a._v(" "),s("li",[a._v("比较次数,交换(移动)次数")])]),a._v(" "),s("h3",{attrs:{id:"稳定性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#稳定性"}},[a._v("#")]),a._v(" 稳定性")]),a._v(" "),s("ul",[s("li",[a._v("概念:如果待排序的序列中存在值相等的元素,经过排序后,相等元素之间原有的先后顺序不变")]),a._v(" "),s("li",[a._v("应用:可针对对象的多种属性进行有优先级的排序")])]),a._v(" "),s("h3",{attrs:{id:"内存损耗"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#内存损耗"}},[a._v("#")]),a._v(" 内存损耗")]),a._v(" "),s("ul",[s("li",[a._v("通过空间复杂度来衡量")])]),a._v(" "),s("h2",{attrs:{id:"冒泡排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序"}},[a._v("#")]),a._v(" 冒泡排序")]),a._v(" "),s("h3",{attrs:{id:"概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[a._v("#")]),a._v(" 概念")]),a._v(" "),s("ul",[s("li",[a._v("只操作相邻的两个数据,每次冒泡操作会对相邻的两个元素进行比较")]),a._v(" "),s("li",[a._v("一次冒泡会让至少一个元素移动到正确位置")]),a._v(" "),s("li",[a._v("优化:若某次冒泡不存在数据交换,则说明已经达到完全有序,不用再执行后续的冒泡操作")])]),a._v(" "),s("h3",{attrs:{id:"稳定性-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#稳定性-2"}},[a._v("#")]),a._v(" 稳定性")]),a._v(" "),s("ul",[s("li",[a._v("冒泡排序是稳定的排序算法")])]),a._v(" "),s("h3",{attrs:{id:"时间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[a._v("#")]),a._v(" 时间复杂度")]),a._v(" "),s("ul",[s("li",[a._v("最好:O(n),最坏:O(n²)")])]),a._v(" "),s("h3",{attrs:{id:"实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[a._v("#")]),a._v(" 实现")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code")]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"})]),s("h2",{attrs:{id:"插入排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插入排序"}},[a._v("#")]),a._v(" 插入排序")]),a._v(" "),s("h3",{attrs:{id:"概念-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念-2"}},[a._v("#")]),a._v(" 概念")]),a._v(" "),s("ul",[s("li",[a._v("将数组分为已排序区间和未排序区间,初始已排序区间只有一个元素,即数组的第一个元素,在未排序区间取出一个插入到已排序区间的正确位置,直到未排序区间为空")])]),a._v(" "),s("h3",{attrs:{id:"稳定性-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#稳定性-3"}},[a._v("#")]),a._v(" 稳定性")]),a._v(" "),s("ul",[s("li",[a._v("插入排序是稳定的排序算法")])]),a._v(" "),s("h3",{attrs:{id:"时间复杂度-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度-2"}},[a._v("#")]),a._v(" 时间复杂度")]),a._v(" "),s("ul",[s("li",[a._v("最好:O(n),最坏:O(n²)")])]),a._v(" "),s("h3",{attrs:{id:"相比冒泡排序的优势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相比冒泡排序的优势"}},[a._v("#")]),a._v(" 相比冒泡排序的优势")]),a._v(" "),s("ul",[s("li",[a._v("尽管时间复杂度相同,但就代码实现上来看,冒泡的数据交换比插入更为复杂,赋值操作更多")])]),a._v(" "),s("h3",{attrs:{id:"实现-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现-2"}},[a._v("#")]),a._v(" 实现")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code")]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"})]),s("h2",{attrs:{id:"选择排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#选择排序"}},[a._v("#")]),a._v(" 选择排序")]),a._v(" "),s("h3",{attrs:{id:"概念-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念-3"}},[a._v("#")]),a._v(" 概念")]),a._v(" "),s("ul",[s("li",[a._v("将数组分为已排序区间和未排序区间,初始已排序区间为空,每次在未排序区间取出一个最小元素与未排序区间第一个元素交换位置 ,知道未排序区间为空")])]),a._v(" "),s("h3",{attrs:{id:"稳定性-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#稳定性-4"}},[a._v("#")]),a._v(" 稳定性")]),a._v(" "),s("ul",[s("li",[a._v("选择排序不是稳定的排序算法")])]),a._v(" "),s("h3",{attrs:{id:"时间复杂度-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度-3"}},[a._v("#")]),a._v(" 时间复杂度")]),a._v(" "),s("ul",[s("li",[a._v("最好:O(n²),最坏:O(n²)")])]),a._v(" "),s("h3",{attrs:{id:"实现-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现-3"}},[a._v("#")]),a._v(" 实现")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code")]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"})])])}),[],!1,null,null,null);t.default=v.exports}}]);