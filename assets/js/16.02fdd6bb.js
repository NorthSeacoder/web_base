(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{1063:function(t,a,s){"use strict";s.r(a);var r=s(71),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"分治算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分治算法"}},[t._v("#")]),t._v(" 分治算法")]),t._v(" "),s("h2",{attrs:{id:"代码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),s("ul",[s("li",[t._v("求一组数据的逆序对个数")])]),t._v(" "),s("h2",{attrs:{id:"概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),s("ul",[s("li",[t._v("分而治之,将原问题划分为 n 个规模较小并且与原问题结构相似的子问题,递归的解决这些子问题,然后再合并其结果,就得到原问题的解")])]),t._v(" "),s("h2",{attrs:{id:"解题步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解题步骤"}},[t._v("#")]),t._v(" 解题步骤")]),t._v(" "),s("ul",[s("li",[t._v("分解:将原问题分解成一系列子问题")]),t._v(" "),s("li",[t._v("解决:递归的求解各个子问题,若子问题够小,则直接求解")]),t._v(" "),s("li",[t._v("合并:将子问题合并成原问题")])]),t._v(" "),s("h2",{attrs:{id:"前提条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前提条件"}},[t._v("#")]),t._v(" 前提条件")]),t._v(" "),s("ul",[s("li",[t._v("原问题分解成的小问题具有相同的模式")]),t._v(" "),s("li",[t._v("小问题可以独立求解,子问题之间没有相关性(与动态规划的区别)")]),t._v(" "),s("li",[t._v("具有分解终止条件")]),t._v(" "),s("li",[t._v("可以将子问题合并为原问题,且复杂度不高")])]),t._v(" "),s("h2",{attrs:{id:"应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用"}},[t._v("#")]),t._v(" 应用")])])}),[],!1,null,null,null);a.default=v.exports}}]);