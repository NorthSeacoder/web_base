(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{1069:function(t,a,v){"use strict";v.r(a);var _=v(71),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"递归"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#递归"}},[t._v("#")]),t._v(" 递归")]),t._v(" "),v("h2",{attrs:{id:"掌握程度"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#掌握程度"}},[t._v("#")]),t._v(" 掌握程度")]),t._v(" "),v("ul",[v("li",[t._v("轻松写出二叉树遍历,八皇后,背包问题,DFS 的递归代码")]),t._v(" "),v("li",[t._v("难度排序\n"),v("ul",[v("li",[t._v("斐波那契数列,求阶乘")]),t._v(" "),v("li",[t._v("归并,快排,二叉树遍历,求高度")]),t._v(" "),v("li",[t._v("回溯八皇后,背包问题")])])])]),t._v(" "),v("h2",{attrs:{id:"代码实现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),v("ul",[v("li",[t._v("同上")]),t._v(" "),v("li",[t._v("实现一组数据集合的全排列")])]),t._v(" "),v("h2",{attrs:{id:"什么是递归"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是递归"}},[t._v("#")]),t._v(" 什么是递归")]),t._v(" "),v("ul",[v("li",[t._v("递归是一种非常高效、简洁的编码技巧，一种应用非常广泛的算法，比如 DFS 深度优先搜索、前中后序二叉树遍历等都是使用递归。")]),t._v(" "),v("li",[t._v("方法或函数调用自身的方式称为递归调用，调用称为递，返回称为归。")])]),t._v(" "),v("h2",{attrs:{id:"优缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[t._v("#")]),t._v(" 优缺点")]),t._v(" "),v("ul",[v("li",[t._v("优点:\n"),v("ul",[v("li",[t._v("代码的表达力很强，写起来简洁。")])])]),t._v(" "),v("li",[t._v("缺点:\n"),v("ul",[v("li",[t._v("空间复杂度高,有堆栈溢出风险")]),t._v(" "),v("li",[t._v("存在重复计算、过多的函数调用会耗时较多等问题")])])])]),t._v(" "),v("h2",{attrs:{id:"前提条件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前提条件"}},[t._v("#")]),t._v(" 前提条件")]),t._v(" "),v("ul",[v("li",[t._v("问题的解可以分解为几个子问题的解")]),t._v(" "),v("li",[t._v("问题与子问题，除了数据规模不同，求解思路完全一样")]),t._v(" "),v("li",[t._v("存在递归终止条件")])]),t._v(" "),v("h2",{attrs:{id:"递归常见问题及解决方案"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#递归常见问题及解决方案"}},[t._v("#")]),t._v(" 递归常见问题及解决方案")]),t._v(" "),v("ul",[v("li",[t._v("堆栈溢出:声明一个全局变量来控制递归的深度，从而避免堆栈溢出。")]),t._v(" "),v("li",[t._v("重复计算：保存已经求解过的值，从而避免重复计算。")])]),t._v(" "),v("h2",{attrs:{id:"代码示例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#代码示例"}},[t._v("#")]),t._v(" 代码示例")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("n 个台阶,每次 1 或 2 步,有多少种走法")])]),t._v(" "),v("li",[v("p",[t._v("斐波那契")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);