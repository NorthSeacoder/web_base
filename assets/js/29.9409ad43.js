(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{1067:function(a,s,t){"use strict";t.r(s);var n=t(71),r=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"字符串匹配算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串匹配算法"}},[a._v("#")]),a._v(" 字符串匹配算法")]),a._v(" "),t("ul",[t("li",[a._v("基础概念\n"),t("ul",[t("li",[a._v("在字符串 A 中查找字符串 B，那字符串 A 就是主串，字符串 B 就是模式串")])])])]),a._v(" "),t("h2",{attrs:{id:"掌握程度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#掌握程度"}},[a._v("#")]),a._v(" 掌握程度")]),a._v(" "),t("ul",[t("li",[a._v("能实践 BF 算法")]),a._v(" "),t("li",[a._v("看懂 RK 算法")]),a._v(" "),t("li",[a._v("其余了解")])]),a._v(" "),t("h2",{attrs:{id:"代码实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[a._v("#")]),a._v(" 代码实现")]),a._v(" "),t("ul",[t("li",[a._v("实现朴素的字符串匹配算法")]),a._v(" "),t("li",[a._v("实现一个字符集，只包含 a ～ z 这 26 个英文字母的 Trie 树")])]),a._v(" "),t("h2",{attrs:{id:"bf-算法-暴力-朴素匹配算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bf-算法-暴力-朴素匹配算法"}},[a._v("#")]),a._v(" BF 算法(暴力|朴素匹配算法)")]),a._v(" "),t("h3",{attrs:{id:"原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),t("ul",[t("li",[a._v("在主串中,从 0 开始逐位匹配")])]),a._v(" "),t("h2",{attrs:{id:"rk-算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rk-算法"}},[a._v("#")]),a._v(" RK 算法")]),a._v(" "),t("h3",{attrs:{id:"原理-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理-2"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),t("ul",[t("li",[a._v("我们通过哈希算法对主串中的 n-m+1 个子串分别求哈希值，然后逐个与模式串的哈希值比较大小")]),a._v(" "),t("li",[a._v("n-m+1 :对比的次数")])]),a._v(" "),t("h2",{attrs:{id:"bm-算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bm-算法"}},[a._v("#")]),a._v(" BM 算法")]),a._v(" "),t("h3",{attrs:{id:"原理-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理-3"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),t("ul",[t("li",[a._v("坏字符(BC)\n"),t("ul",[t("li",[a._v("模式串移动距离为坏字符对应下标-坏字符下标(不存在则为-1,多个则为最后一个)")])])]),a._v(" "),t("li",[a._v("好后缀(GS)")])]),a._v(" "),t("h2",{attrs:{id:"kmp-算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kmp-算法"}},[a._v("#")]),a._v(" KMP 算法")]),a._v(" "),t("p",[a._v("跟 bm 都需要后期再过一遍....")]),a._v(" "),t("h2",{attrs:{id:"trie-树-字典树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#trie-树-字典树"}},[a._v("#")]),a._v(" Trie 树(字典树)")]),a._v(" "),t("h3",{attrs:{id:"原理-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理-4"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),t("ul",[t("li",[a._v("Trie 树的本质,就是利用字符串之间的公共前缀,将除服的前缀合并在一起")])]),a._v(" "),t("h3",{attrs:{id:"实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[a._v("#")]),a._v(" 实现")]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TrieNode")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("constructor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("data")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("children "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Array")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("26")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("data "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" data"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("isEndingChar "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Trie")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//往 Trie 中插入一个字符串")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("insert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//在 Trie 中查找一个字符串")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("find")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br")])]),t("h2",{attrs:{id:"ac自动机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ac自动机"}},[a._v("#")]),a._v(" AC自动机")]),a._v(" "),t("h3",{attrs:{id:"原理-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理-5"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),t("ul",[t("li",[a._v("在 Trie 的基础上加了 KMP 的 next 数组")])])])}),[],!1,null,null,null);s.default=r.exports}}]);