(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{1089:function(t,a,s){"use strict";s.r(a);var r=s(71),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"回溯算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回溯算法"}},[t._v("#")]),t._v(" 回溯算法")]),t._v(" "),s("h2",{attrs:{id:"代码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),s("ul",[s("li",[t._v("求八皇后")]),t._v(" "),s("li",[t._v("求解 0-1 背包问题")])]),t._v(" "),s("h2",{attrs:{id:"概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),s("ul",[s("li",[t._v("枚举所有的解,找到满足期望的解,划分阶段,先随意选择,当走不通时返回上一阶段")]),t._v(" "),s("li",[t._v("相当于穷举,使用合理的剪枝技巧减少穷举的数量")])])])}),[],!1,null,null,null);a.default=e.exports}}]);